Contributing
============

Contributions are welcome. No matter your current skills, it’s possible
to make valuable contribution to the abess.

Bugs Report
-----------

| If you’ve found a bug, please open an issue at
  https://github.com/abess-team/abess/issues or send an email to Jin Zhu
  at zhuj37@mail2.sysu.edu.cn. When reporting a bug, please include:
| - codes to reproduce the bug. - your operating system and Python or R
  version. - any details about your local setup that might be helpful in
  troubleshooting.

We strongly encourage to spend some time trying to make it as minimal as
possible: the more time you spend doing this, the easier it will be for
the abess team to fix it.

Suggest New Features
--------------------

If you’re working on best subset selection for some problem that can not
be handled by the abess library, it is encouraged to share your new
features suggestion to us. You can open an issue at
https://github.com/abess-team/abess/issues to post your suggestion. When
suggesting a new feature, please:

-  explain in detail how it would work.
-  keep the scope as narrow as possible, to make it easier to understand
   and implementation.
-  provide few important literatures if possible.

Contribute documentation
------------------------

General procedure
~~~~~~~~~~~~~~~~~

If you’re a more experienced with the abess and are looking forward to
improve your open source development skills, the next step up is to
contribute a pull request to a abess documentation.

In most of case, the workflow is given below, but if you are not familar
with git and github, we suggest you install the `github
desktop <https://desktop.github.com/>`__ that provide a user-friendly
interaction interface for simplifying documentation contribution. - Fork
the `master repository <https://github.com/abess-team/abess>`__ by
clicking on the “Fork” button on the top right of the page, which would
create a copy to your own GitHub account;

-  Clone your fork of abess to the local by
   `Git <https://git-scm.com/>`__;

   .. code:: bash

      $ git clone https://github.com/your_account_name/abess.git
      $ cd abess

-  Create a new branch, e.g. named ``my_branch``, to hold your
   development changes:

   .. code:: bash

      $ git branch my_branch
      $ git checkout my_branch

   It is preferred to work on your own branch instead of the master one;

-  Commit your improvements or additions to documentation (forming an
   ideally legible commit history):

   .. code:: bash

      $ git add changed_files
      $ git commit -m "some commits"
      $ git push

-  Merge your branch with the master branch that have the up-to-date
   codes in `abess <https://github.com/abess-team/abess>`__;

-  Submit a pull request explaining your contribution for documentation.

The `online documentation <https://abess.readthedocs.io>`__ for our
project are generated by generation by
`Sphinx <https://www.sphinx-doc.org/en/master/index.html>`__ and
`pkgdown <https://pkgdown.r-lib.org/index.html>`__ for Python and R,
respectively. Our website is published via
`readthedocs <https://readthedocs.org>`__.

Python document
~~~~~~~~~~~~~~~

Python API
^^^^^^^^^^

For the development of Python documentation, there is a little
difference between a new method and a new function. A new method need a
brief introduction and some examples, such as
`[link] <https://github.com/abess-team/abess/blob/master/python/abess/linear.py#:~:text=class%20abessLogistic(bess_base)%3A-,%22%22%22,%22%22%22,-def%20__init__(self)>`__;
and a new function under should at least contain an introduction and the
parameters it requires, such as
`[link] <https://github.com/abess-team/abess/blob/master/python/abess/linear.py#:~:text=return%20y-,def%20score(self%2C%20X%2C%20y)%3A,%22%22%22,-X%2C%20y%20%3D%20self>`__.
Also note that the style of Python document is similar to
`numpydoc <https://numpydoc.readthedocs.io/en/latest/format.html>`__.

The development of Python API’s documentation relies on
`Sphinx <https://pypi.org/project/Sphinx/>`__,
`nbsphinx <https://pypi.org/project/nbsphinx/>`__ (support jupyter
notebook for Sphinx),
`myst-parser <https://pypi.org/project/myst-parser/>`__ (support
markdown for Sphinx),
`sphinx-rtd-theme <https://pypi.org/project/sphinx-rtd-theme/>`__
(support “Read the Docs” theme for Sphinx). Make sure these packages
have been installed.

There are four basic steps to write documentation for the Python API:

1. Add comments to Python files in ``python/abess`` directory.

2. Go to the ``docs`` directory, and run ``make html`` in command line
   to convert comments to ``.html`` files.

3. Preview documentation by open/refresh the ``.html`` files in
   ``docs/_build/Python-package/``.

4. Repeat steps 1-3 until you are satisfied with the documentation for
   Python API.

More advanced topics for writing documentation are available at:
`Sphinx <https://www.sphinx-doc.org/en/master/>`__.

Tutorials
^^^^^^^^^

A tutorial is a long-form guide to some essential functions in the
``abess`` package. We recommend to use a tutorial to:

-  describes the problem that one function can solve;

-  show the reader how to solve with the function;

-  give more details about the potential advanced usage.

A typical online vignette example is present
`[here] <https://abess.readthedocs.io/en/latest/Tutorial/LinearRegression.html>`__.

The development also follows the four basic steps for the Python API
except the first step changes to:

-  add/modify the tutorial files in ``docs/Tutorial`` directory.

R document
~~~~~~~~~~

R function
^^^^^^^^^^

For the development of R documentation, the most important thing to know
is that the abess R package relies on
`roxygen2 <https://cran.r-project.org/web/packages/roxygen2>`__ package.
This means that documentation is found in the R code close to the source
of each function. Before writing the documentation, it would be better
to ensure the usage of the `Rd
tags <https://cran.r-project.org/web/packages/roxygen2/vignettes/rd.html>`__.

There are four basic steps to write documentation for the R function in
abess:

1. Add comments to ``R`` files in ``R-package/R`` directory.

2. Run ``devtools::document()`` in R to convert roxygen comments to
   ``.Rd`` files.

3. Preview documentation with ``?``.

4. Repeat steps 1-3 until you are satisfied with the documentation.

More advanced topics for writing object documentation are available at:
https://r-pkgs.org/man.html.

Online vignette
^^^^^^^^^^^^^^^

The aim of a online R vignette is the same as a tutorial for Python
package. A typical online vignette example is presented in this
`[link] <https://abess-team.github.io/abess/articles/v03-classification.html>`__.
We strongly recommend to use R markdown (``.Rmd`` files) to organize a
online vignette.

There are also four steps to write online vignettes:

1. Add/modify to ``.Rmd`` files in ``R-package/vignettes`` directory.

2. Run ``pkgdown::build_articles()`` in R to convert ``.Rmd`` files to
   webpages. (Make sure the ``pkgdown`` R package has been installed.)

3. Preview the webpages.

4. Repeat steps 1-3 until you are satisfied with the vignettes.

You can learn many detail about ``pkgdown`` package and R markdown in
`pkgdown’s
website <https://pkgdown.r-lib.org/reference/build_home.html>`__ and
`Hadley’s website <https://r-pkgs.org/vignettes.html>`__, respectively.

Contribute code
---------------

If you are a experienced programmer, you might want to help new features
development or bug fixing for the abess library. The preferred workflow
for contributing code to abess is to fork the master repository on
GitHub, clone, and develop on a branch:

1. Before contributing, you should always open an issue and make sure
   someone from the abess team agrees that your work is really
   contributive, and is happy with your proposal. We don’t want you to
   spend a bunch of time on something that we are working on or we don’t
   think is a good idea;

2. Fork the `master repository <https://github.com/abess-team/abess>`__
   by clicking on the “Fork” button on the top right of the page, which
   would create a copy to your own GitHub account;

3. Clone your fork of abess to the local by
   `Git <https://git-scm.com/>`__;

   .. code:: bash

      $ git clone https://github.com/your_account_name/abess.git
      $ cd abess

4. Create a new branch, e.g. named ``my_branch``, to hold your
   development changes:

   .. code:: bash

      $ git branch my_branch
      $ git checkout my_branch

   It is preferred to work on your own branch instead of the master one;

5. While developing code, make sure to read the abess style guide (PEP8
   for Python, tidyverse for R) which will make sure that your new code
   and documentation matches the existing style. This makes the review
   process much smoother. For more details about code developing, read
   the `Code Developing <CodeDeveloping.md>`__ description for abess
   library;

6. After finishing the development and making sure it works well, you
   can push them onto your repository:

   .. code:: bash

      $ git add changed_files
      $ git commit -m "some commits"
      $ git push

7. Look back to GItHub, merge your branch with the master branch that
   have the up-to-date codes in
   `abess <https://github.com/abess-team/abess>`__; and click the
   “Contribute” button on your fork to open pull request. Now, we can
   receive your contribution.
