
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_gallery-1\work_with_sklearn.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_gallery-1_work_with_sklearn.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_gallery-1_work_with_sklearn.py:


Work with scikit-learn
==========================
Our code can work with the famous package `sklearn` easily, and here is an example.

.. GENERATED FROM PYTHON SOURCE LINES 6-15

.. code-block:: default


    from abess.linear import LogisticRegression
    from sklearn.datasets import load_breast_cancer
    from sklearn.pipeline import Pipeline
    from sklearn.metrics import roc_auc_score, make_scorer, roc_curve
    from sklearn.preprocessing import PolynomialFeatures
    from sklearn.model_selection import GridSearchCV
    import matplotlib.pyplot as plt


.. GENERATED FROM PYTHON SOURCE LINES 16-19

Establish the process
-----------------------
Suppose we would like to extend the original variables to their interactions, and then do `LogisticRegression` on them. This can be record with `Pipeline`:

.. GENERATED FROM PYTHON SOURCE LINES 19-26

.. code-block:: default



    pipe = Pipeline([
        ('poly', PolynomialFeatures(include_bias=False)),   # without intercept
        ('alogistic', LogisticRegression())
    ])


.. GENERATED FROM PYTHON SOURCE LINES 27-30

Parameter grid
--------------------------------
We can give different parameters to model and let the program choose the best. Here we should give parameters for `PolynomialFeatures`, for example:

.. GENERATED FROM PYTHON SOURCE LINES 30-38

.. code-block:: default




    param_grid = {
        'poly__interaction_only': [True, False],    # whether the "self-combination" (e.g. X^2, X^3) exists
        'poly__degree': [1, 2, 3]                   # the degree of polynomial
    }


.. GENERATED FROM PYTHON SOURCE LINES 39-44

Note that the program would try ALL combinations of what we give, which means that there are :math:`2\times3=6` combinations of parameters will be tried.

Criterion
------------------
After giving a grid of parameters, we should define what is a "better" result. For example, the AUR (area under ROC curve) can be a criterion and the larger, the better.

.. GENERATED FROM PYTHON SOURCE LINES 44-48

.. code-block:: default



    scorer = make_scorer(roc_auc_score, greater_is_better = True)


.. GENERATED FROM PYTHON SOURCE LINES 49-52

Cross Validation
---------------------------
For more accurate results, cross validation is often formed. In this example, we use 5-fold CV for parameters searching: 

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: default




    grid_search = GridSearchCV(pipe, param_grid, scoring = scorer, cv = 5)


.. GENERATED FROM PYTHON SOURCE LINES 58-61

Model fitting
-------------------------
Eveything is prepared now. We can simply load the data and put it into `grid_search`: 

.. GENERATED FROM PYTHON SOURCE LINES 61-68

.. code-block:: default




    X, y = load_breast_cancer(return_X_y = True)
    grid_search.fit(X, y)
    print([grid_search.best_score_, grid_search.best_params_])


.. GENERATED FROM PYTHON SOURCE LINES 69-70

The best choice of parameter combination is shown above: 2 degree with "self-combination". Here is its ROC curve:

.. GENERATED FROM PYTHON SOURCE LINES 70-79

.. code-block:: default




    proba = grid_search.predict_proba(X)
    fpr, tpr, _ = roc_curve(y, proba)
    plt.plot(fpr, tpr)
    plt.plot([0, 1], [0, 1], 'k--')
    plt.show()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_gallery-1_work_with_sklearn.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: work_with_sklearn.py <work_with_sklearn.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: work_with_sklearn.ipynb <work_with_sklearn.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
